// Generated by CoffeeScript 1.8.0
(function() {
  var CanvasManager, CanvasPage, CanvasPdfDocument;

  CanvasManager = (function() {
    function CanvasManager(canvas_elem, pg_dimensions) {
      var canv_h, canv_w, scale_ratio;
      this.canvas_elem = canvas_elem;
      this.pg_dimensions = pg_dimensions;
      this.page_count = 0;
      this.top_pg_margin = 20;
      this.pixel_scale = 1;
      $(this.canvas_elem).bind('dragover', (function(_this) {
        return function(e) {
          var x_pos, y_pos;
          x_pos = e.originalEvent.clientX - _this.canvas_elem.getBoundingClientRect().left;
          y_pos = e.originalEvent.clientY - _this.canvas_elem.getBoundingClientRect().top;
          console.log('(' + x_pos + ', ' + y_pos + ')');
          e.stopPropagation();
          return e.preventDefault();
        };
      })(this));
      scale_ratio = 1;
      if (window.devicePixelRatio > 1) {
        scale_ratio = window.devicePixelRatio;
        this.pixel_scale = window.devicePixelRatio;
      }
      canv_w = $(this.canvas_elem).width();
      canv_h = $(this.canvas_elem).height();
      this.canvas_elem.width = canv_w * scale_ratio;
      this.canvas_elem.height = canv_h * scale_ratio;
      this.addPage(null);
      this.addPage(null);
      void 0;
    }

    CanvasManager.prototype.addPage = function(page) {
      var canv_w, ctx, pg_x, pg_y;
      canv_w = $(this.canvas_elem).width();
      pg_x = (canv_w / 2) - (this.pg_dimensions.x / 2);
      pg_y = this.top_pg_margin + this.page_count * (this.top_pg_margin + this.pg_dimensions.y);
      ctx = this.canvas_elem.getContext('2d');
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(pg_x * this.pixel_scale, pg_y * this.pixel_scale, this.pg_dimensions.x * this.pixel_scale, this.pg_dimensions.y * this.pixel_scale);
      ctx.save();
      this.canvas_elem.height = +(canv_h * scale_ratio);
      this.page_count += 1;
      return void 0;
    };

    return CanvasManager;

  })();

  CanvasPdfDocument = (function() {
    function CanvasPdfDocument(canvas_elem, title, filename, datecreated, lastmod, pg_dimensions, pages, settings) {
      this.canvas_elem = canvas_elem != null ? canvas_elem : null;
      this.title = title != null ? title : '';
      this.filename = filename != null ? filename : '';
      this.datecreated = datecreated != null ? datecreated : '';
      this.lastmod = lastmod != null ? lastmod : '';
      this.pg_dimensions = pg_dimensions != null ? pg_dimensions : {};
      this.pages = pages != null ? pages : [];
      this.settings = settings != null ? settings : {};
      this.pages = [new CanvasPage()];
      this.pg_dimensions = {
        x: 500,
        y: 750
      };
      this.canvas_mgr = new CanvasManager(this.canvas_elem, this.pg_dimensions);
      this.renderPages();
    }

    CanvasPdfDocument.prototype.updateTitle = function(title) {
      return void 0;
    };

    CanvasPdfDocument.prototype.updateFilename = function(filename) {
      return void 0;
    };

    CanvasPdfDocument.prototype.updateLastMod = function(lastMod) {
      return void 0;
    };

    CanvasPdfDocument.prototype.addPage = function(page) {
      return void 0;
    };

    CanvasPdfDocument.prototype.updateSettings = function(settings) {
      return void 0;
    };

    CanvasPdfDocument.prototype.getSettings = function() {
      return void 0;
    };

    CanvasPdfDocument.prototype.saveDoc = function() {
      return void 0;
    };

    CanvasPdfDocument.prototype.generateJSON = function() {
      return void 0;
    };

    CanvasPdfDocument.prototype.loadJSON = function(json_str) {
      return void 0;
    };

    CanvasPdfDocument.prototype.renderPages = function() {
      return void 0;
    };

    return CanvasPdfDocument;

  })();

  CanvasPage = (function() {
    function CanvasPage(elements) {
      this.elements = elements != null ? elements : {};
      this.currentSelectedElement = null;
    }

    CanvasPage.prototype.addElement = function(elem) {
      return void 0;
    };

    CanvasPage.prototype.removeElement = function(elem) {
      return void 0;
    };

    CanvasPage.prototype.updateCurrentSelectedElement = function(title) {
      return void 0;
    };

    return CanvasPage;

  })();

  $(document).ready(function() {
    var canvas_change_drag_img, canvas_drop, canvas_ignore_drag, element_drag, element_end_drag, main;
    $('.main-app-container .app-toolbar button').tooltip();
    element_drag = function(e) {
      var canv, dragged_el, element_name;
      element_name = $(e.target).parent().attr('data-element-name');
      dragged_el = $(e.target);
      e.originalEvent.dataTransfer.setData('text/plain', element_name);
      canv = $('.pdf-maker-canvas-wrap .panel-body');
      canv.addClass('dragging');
      dragged_el.addClass('dragging');
      return void 0;
    };
    element_end_drag = function(e) {
      var canv, dragged_el;
      dragged_el = $(e.target);
      canv = $('.pdf-maker-canvas-wrap .panel-body');
      canv.removeClass('dragging');
      dragged_el.removeClass('dragging');
      return void 0;
    };
    canvas_drop = function(e) {
      var dropped_element;
      e.stopPropagation();
      e.preventDefault();
      dropped_element = e.originalEvent.dataTransfer.getData('text/plain');
      return void 0;
    };
    canvas_change_drag_img = function(e) {
      canvas_ignore_drag(e);
      console.log('over');
      return void 0;
    };
    canvas_ignore_drag = function(e) {
      e.stopPropagation();
      e.preventDefault();
      return void 0;
    };
    main = function() {
      var canvas, canvas_elem, title;
      $('.main-app-container .pdf-element-inner-wrap').bind('dragstart', element_drag).bind('dragend', element_end_drag);
      $('.main-app-container .pdf-maker-canvas').bind('dragenter', canvas_change_drag_img).bind('dragover', canvas_ignore_drag).bind('drop', canvas_drop);
      canvas_elem = document.getElementById('pdf-maker-canvas');
      new CanvasPdfDocument(canvas = canvas_elem, title = 'bob');
      return void 0;
    };
    main();
  });

}).call(this);
