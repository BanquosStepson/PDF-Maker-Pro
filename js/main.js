// Generated by CoffeeScript 1.8.0
(function() {
  var CanvasPage, PdfDocument;

  PdfDocument = (function() {
    function PdfDocument(title, filename, datecreated, lastmod, pg_dimensions, pages, settings) {
      this.title = title != null ? title : '';
      this.filename = filename != null ? filename : '';
      this.datecreated = datecreated != null ? datecreated : '';
      this.lastmod = lastmod != null ? lastmod : '';
      this.pg_dimensions = pg_dimensions != null ? pg_dimensions : {};
      this.pages = pages != null ? pages : [];
      this.settings = settings != null ? settings : {};
      this.pg_dimensions = {
        x: 650,
        y: 800
      };
      this.pages = [];
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.renderPages();
      this.registerCanvasDragDropEvents();
    }

    PdfDocument.prototype.updateTitle = function(title) {
      return void 0;
    };

    PdfDocument.prototype.updateFilename = function(filename) {
      return void 0;
    };

    PdfDocument.prototype.updateLastMod = function(lastMod) {
      return void 0;
    };

    PdfDocument.prototype.addPage = function(page) {
      this.pages.push(page);
      return void 0;
    };

    PdfDocument.prototype.updateSettings = function(settings) {
      return void 0;
    };

    PdfDocument.prototype.getSettings = function() {
      return void 0;
    };

    PdfDocument.prototype.getPages = function() {
      return this.pages;
    };

    PdfDocument.prototype.saveDoc = function() {
      return void 0;
    };

    PdfDocument.prototype.generateJSON = function() {
      return void 0;
    };

    PdfDocument.prototype.loadJSON = function(json_str) {
      return void 0;
    };

    PdfDocument.prototype.renderPages = function() {
      var canv_html, i, page, page_canvas, that, _i, _len, _ref;
      that = this;
      _ref = this.pages;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        page = _ref[i];
        canv_html = "<div class=\"col-xs-12\">\n    <div class=\"panel panel-default pdf-page\">\n        <div class=\"panel-body\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <canvas id=\"pdf-page-" + (i + 1) + "\"\n                            class=\"pdf-maker-canvas\"\n                            data-page-num=\"" + (i + 1) + "\">\n                    </canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";
        $('.main-app-container .pdf-maker-canvas-wrap').append(canv_html);
        page_canvas = document.getElementById("pdf-page-" + (i + 1));
        that.pages[i].setCanvasElement(page_canvas);
        that.pages[i].setPageNumber(i + 1);
      }
      return void 0;
    };

    PdfDocument.prototype.registerCanvasDragDropEvents = function() {
      var that;
      that = this;
      $('.main-app-container .pdf-elements-container .pdf-element-inner-wrap').draggable({
        revert: true,
        zIndex: 99
      });
      $('.pdf-maker-canvas-wrap .pdf-page .pdf-maker-canvas').droppable({
        activeClass: 'dragging',
        hoverClass: 'dragging-hover',
        drop: function(e, ui) {
          var dropped_page_num, elem_type;
          dropped_page_num = $(e.target).attr('data-page-num');
          elem_type = ui.draggable.parent().attr('data-element-name');
          if (dropped_page_num !== void 0) {
            return that.pages[dropped_page_num - 1].addDraggedElement(elem_type);
          }
        }
      });
      return void 0;
    };

    return PdfDocument;

  })();

  CanvasPage = (function() {
    function CanvasPage(pg_dimensions, pg_num) {
      this.pg_dimensions = pg_dimensions;
      this.pg_num = pg_num;
      this.canv = null;
    }

    CanvasPage.prototype.setCanvasElement = function(elem) {
      var parent, parent_h, parent_w;
      console.log($(elem));
      parent = $(elem).parent();
      parent_w = parent.width();
      parent_h = parent.height();
      this.canv = new fabric.Canvas(elem);
      this.canv.setWidth(parent_w);
      this.canv.setHeight(parent_h);
      this.setPageBackground();
      return void 0;
    };

    CanvasPage.prototype.addDraggedElement = function(elem) {
      switch (elem) {
        case 'bodytext':
          console.log('bodytext');
          this.addTextElement();
          break;
        case 'image':
          console.log('image');
          this.addImageElement();
          break;
        case 'shape':
          console.log('shape');
          this.addShapeElement();
          break;
        case 'line':
          console.log('line');
          this.addLineElement();
          break;
        case 'heading':
          console.log('heading');
          this.addHeadingElement();
          break;
        case 'subheading':
          console.log('subheading');
          this.addSubheadingElement();
      }
      return void 0;
    };

    CanvasPage.prototype.setPageNumber = function(num) {
      this.pg_num = num;
      return void 0;
    };

    CanvasPage.prototype.addTextElement = function() {
      var newTextElement;
      newTextElement = new fabric.IText('bob');
      this.canv.add(newTextElement);
      return void 0;
    };

    CanvasPage.prototype.addImageElement = function() {
      var newImageElement, url;
      url = 'https://www.google.com/images/srpr/logo11w.png';
      newImageElement = new fabric.Image.fromURL(url, (function(_this) {
        return function(oImg) {
          return _this.canv.add(oImg);
        };
      })(this));
      return void 0;
    };

    CanvasPage.prototype.addShapeElement = function() {
      var newShapeElement;
      newShapeElement = new fabric.Circle({
        radius: 100,
        fill: '#d88'
      });
      this.canv.add(newShapeElement);
      return void 0;
    };

    CanvasPage.prototype.addLineElement = function() {
      var newLineElement;
      newLineElement = new fabric.Text({
        p: v
      });
      return void 0;
    };

    CanvasPage.prototype.addHeadingElement = function() {
      var newHeadingElement;
      newHeadingElement = new fabric.Text({
        p: v
      });
      return void 0;
    };

    CanvasPage.prototype.addSubheadingElement = function() {
      var newSubheadingElement;
      newSubheadingElement = new fabric.Text({
        p: v
      });
      return void 0;
    };

    return CanvasPage;

  })();

  $(document).ready(function() {
    var main;
    $('.main-app-container .app-toolbar button').tooltip();
    main = function() {
      var pdf_doc;
      pdf_doc = new PdfDocument();
      return void 0;
    };
    main();
  });

}).call(this);
