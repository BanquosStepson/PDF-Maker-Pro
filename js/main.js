// Generated by CoffeeScript 1.8.0
(function() {
  var CanvasPage, PdfDocument;

  PdfDocument = (function() {
    function PdfDocument(title, filename, datecreated, lastmod, pg_dimensions, pages, settings) {
      this.title = title != null ? title : '';
      this.filename = filename != null ? filename : '';
      this.datecreated = datecreated != null ? datecreated : '';
      this.lastmod = lastmod != null ? lastmod : '';
      this.pg_dimensions = pg_dimensions != null ? pg_dimensions : {};
      this.pages = pages != null ? pages : [];
      this.settings = settings != null ? settings : {};
      this.pg_dimensions = {
        x: 650,
        y: 800
      };
      this.pages = [];
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.addPage(new CanvasPage(this.pg_dimensions));
      this.renderPages();
      this.registerCanvasDragDropEvents();
      this.registerExternalInteractionEvents();
    }

    PdfDocument.prototype.updateTitle = function(title) {
      return void 0;
    };

    PdfDocument.prototype.updateFilename = function(filename) {
      return void 0;
    };

    PdfDocument.prototype.updateLastMod = function(lastMod) {
      return void 0;
    };

    PdfDocument.prototype.addPage = function(page) {
      this.pages.push(page);
      return void 0;
    };

    PdfDocument.prototype.updateSettings = function(settings) {
      return void 0;
    };

    PdfDocument.prototype.getSettings = function() {
      return void 0;
    };

    PdfDocument.prototype.getPages = function() {
      return this.pages;
    };

    PdfDocument.prototype.saveDoc = function() {
      return void 0;
    };

    PdfDocument.prototype.generateJSON = function() {
      return void 0;
    };

    PdfDocument.prototype.loadJSON = function(json_str) {
      return void 0;
    };

    PdfDocument.prototype.renderPages = function() {
      var canv_html, i, page, page_canvas, that, _i, _len, _ref;
      that = this;
      _ref = this.pages;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        page = _ref[i];
        canv_html = "<div class=\"col-xs-12\">\n    <div class=\"panel panel-default pdf-page\">\n        <div class=\"panel-body\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <canvas id=\"pdf-page-" + (i + 1) + "\"\n                            class=\"pdf-maker-canvas\"\n                            data-page-num=\"" + (i + 1) + "\">\n                    </canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>";
        $('.main-app-container .pdf-maker-canvas-wrap').append(canv_html);
        page_canvas = document.getElementById("pdf-page-" + (i + 1));
        that.pages[i].setCanvasElement(page_canvas);
        that.pages[i].setPageNumber(i + 1);
      }
      return void 0;
    };

    PdfDocument.prototype.registerCanvasDragDropEvents = function() {
      var that;
      that = this;
      $('.main-app-container .pdf-elements-container .pdf-element-inner-wrap').draggable({
        revert: true,
        zIndex: 99,
        drag: function(e) {
          if ($(e.originalEvent.target).hasClass('pdf-maker-canvas')) {
            return $(e.target).css('opacity', 0.3);
          }
        },
        stop: function(e) {
          return $(e.target).css('opacity', 1);
        }
      });
      $('.pdf-maker-canvas-wrap .pdf-page .pdf-maker-canvas').droppable({
        activeClass: 'dragging',
        hoverClass: 'dragging-hover',
        tolerance: 'touch',
        drop: function(e, ui) {
          var canvasCoords, dropCoords, dropped_page_num, elem_type, x, y;
          dropped_page_num = $(e.target).attr('data-page-num');
          elem_type = ui.draggable.parent().attr('data-element-name');
          if (dropped_page_num !== void 0) {
            canvasCoords = $(e.target)[0].getBoundingClientRect();
            dropCoords = {
              x: 0,
              y: 0
            };
            x = e.originalEvent.clientX;
            y = e.originalEvent.clientY;
            dropCoords.x = x - canvasCoords.left;
            dropCoords.y = y - canvasCoords.top;
            return that.pages[dropped_page_num - 1].addDraggedElement(elem_type, dropCoords);
          }
        }
      }, void 0);
      return void 0;
    };

    PdfDocument.prototype.registerExternalInteractionEvents = function() {
      var that;
      that = this;
      $('.pdfdoc-property-editor .pdfdoc-properties #show-margin-lines').on('change', function() {
        var page, _i, _j, _len, _len1, _ref, _ref1, _results, _results1;
        if ($(this).prop('checked')) {
          console.log('checked');
          _ref = that.pages;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            page = _ref[_i];
            _results.push(page.setMarginLines());
          }
          return _results;
        } else {
          console.log('unchecked');
          _ref1 = that.pages;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            page = _ref1[_j];
            _results1.push(page.removeMarginLines());
          }
          return _results1;
        }
      });
      return void 0;
    };

    return PdfDocument;

  })();

  CanvasPage = (function() {
    function CanvasPage(pg_dimensions, pg_num) {
      this.pg_dimensions = pg_dimensions;
      this.pg_num = pg_num;
      this.canv = null;
    }

    CanvasPage.prototype.setCanvasElement = function(elem) {
      var parent, parent_h, parent_w;
      parent = $(elem).parent();
      this.canv_w = parent_w = parent.width();
      this.canv_h = parent_h = parent.height();
      this.pg_vertical_padding = 20;
      this.pg_horizontal_padding = (this.canv_w - this.pg_dimensions.x) / 2;
      this.canv = new fabric.Canvas(elem);
      this.canv.setWidth(parent_w);
      this.canv.setHeight(parent_h);
      console.log(parent_h);
      this.canv.renderAll();
      this.setPageBackground();
      this.registerInternalInteractionEvents();
      return void 0;
    };

    CanvasPage.prototype.addDraggedElement = function(elem, coords) {
      switch (elem) {
        case 'bodytext':
          console.log('added bodytext :: ' + coords.x + ', ' + coords.y);
          this.addTextElement(coords);
          break;
        case 'image':
          console.log('added image :: ' + coords.x + ', ' + coords.y);
          this.addImageElement(coords);
          break;
        case 'shape':
          console.log('added shape :: ' + coords.x + ', ' + coords.y);
          this.addShapeElement(coords);
          break;
        case 'line':
          console.log('added line :: ' + coords.x + ', ' + coords.y);
          this.addLineElement(coords);
          break;
        case 'heading':
          console.log('added heading :: ' + coords.x + ', ' + coords.y);
          this.addHeadingElement(coords);
          break;
        case 'subheading':
          console.log('added subheading :: ' + coords.x + ', ' + coords.y);
          this.addSubheadingElement(coords);
      }
      return void 0;
    };

    CanvasPage.prototype.setPageNumber = function(num) {
      this.pg_num = num;
      return void 0;
    };

    CanvasPage.prototype.addTextElement = function(coords) {
      var newTextElement, sampleText;
      sampleText = 'Double click text to edit';
      newTextElement = new fabric.IText(sampleText, {
        left: coords.x,
        top: coords.y,
        originX: 'center',
        originY: 'center',
        fontSize: 16,
        hasControls: false
      });
      this.canv.add(newTextElement);
      this.fixElementPosition(newTextElement);
      return void 0;
    };

    CanvasPage.prototype.addImageElement = function(coords) {
      var newImageElement, opts, url;
      url = 'https://www.google.com/images/srpr/logo11w.png';
      opts = {
        left: coords.x,
        top: coords.y,
        originX: 'center',
        originY: 'center'
      };
      newImageElement = new fabric.Image.fromURL(url, (function(_this) {
        return function(oImg) {
          _this.canv.add(oImg);
          return _this.fixElementPosition(oImg);
        };
      })(this), opts);
      return void 0;
    };

    CanvasPage.prototype.addShapeElement = function(coords) {
      var newShapeElement;
      newShapeElement = new fabric.Circle({
        left: coords.x,
        top: coords.y,
        radius: 100,
        fill: '#f33',
        originX: 'center',
        originY: 'center'
      });
      this.canv.add(newShapeElement);
      this.fixElementPosition(newShapeElement);
      return void 0;
    };

    CanvasPage.prototype.addLineElement = function(coords) {
      var newLineElement;
      coords = [coords.x, coords.y, coords.x + 100, coords.y];
      newLineElement = new fabric.Line(coords, {
        stroke: '#000000',
        strokeWidth: 3,
        lockScalingY: true,
        hasControls: false,
        borderColor: '#ff9800',
        originX: 'center',
        originY: 'center',
        padding: 2
      });
      this.canv.add(newLineElement);
      this.fixElementPosition(newLineElement);
      return void 0;
    };

    CanvasPage.prototype.addHeadingElement = function(coords) {
      var newHeadingElement, sampleText;
      sampleText = 'Heading (doubleclick to edit)';
      newHeadingElement = new fabric.IText(sampleText, {
        left: coords.x,
        top: coords.y,
        originX: 'center',
        originY: 'center',
        fontSize: 36,
        hasControls: false
      });
      this.canv.add(newHeadingElement);
      this.fixElementPosition(newHeadingElement);
      return void 0;
    };

    CanvasPage.prototype.addSubheadingElement = function(coords) {
      var newSubheadingElement, sampleText;
      sampleText = 'Subheading (doubleclick to edit)';
      newSubheadingElement = new fabric.IText(sampleText, {
        left: coords.x,
        top: coords.y,
        originX: 'center',
        originY: 'center',
        fontSize: 20,
        hasControls: false
      });
      this.canv.add(newSubheadingElement);
      this.fixElementPosition(newSubheadingElement);
      return void 0;
    };

    CanvasPage.prototype.fixElementPosition = function(elem) {
      var bottomPos, leftPos, rightPos, topPos;
      leftPos = elem.left - elem.width / 2;
      rightPos = leftPos + elem.width;
      topPos = elem.top - elem.height / 2;
      bottomPos = topPos + elem.height;
      if (leftPos < this.pg_horizontal_padding) {
        elem.left = this.pg_horizontal_padding + elem.width / 2;
      }
      if (topPos < this.pg_vertical_padding) {
        elem.top = this.pg_vertical_padding + elem.height / 2;
      }
      if (rightPos > this.pg_horizontal_padding + this.pg_dimensions.x) {
        elem.left = this.canv_w - this.pg_horizontal_padding - elem.width / 2;
      }
      if (bottomPos > this.pg_vertical_padding + this.pg_dimensions.y) {
        elem.top = this.canv_w - this.pg_vertical_padding - elem.height / 2;
      }
      elem.setCoords();
      this.canv.renderAll();
      return void 0;
    };

    CanvasPage.prototype.registerInternalInteractionEvents = function() {
      this.canv.on('object:moving', (function(_this) {
        return function(e) {
          var bottomBound, height, left, rightBound, target, top, width;
          target = e.target;
          width = target.currentWidth;
          height = target.currentHeight;
          top = target.top - height / 2;
          left = target.left - width / 2;
          rightBound = _this.pg_dimensions.x + _this.pg_horizontal_padding;
          bottomBound = _this.pg_dimensions.y + _this.pg_vertical_padding;
          if (top + height / 2 < _this.pg_vertical_padding) {
            top = _this.pg_vertical_padding;
            target.setTop(top);
          }
          if (left + width / 2 < _this.pg_horizontal_padding) {
            left = _this.pg_horizontal_padding;
            target.setLeft(left);
          }
          if (left + width / 2 > rightBound) {
            left = rightBound;
            target.setLeft(left);
          }
          if (top + height / 2 > bottomBound) {
            top = bottomBound;
            return target.setTop(top);
          }
        };
      })(this));
      this.canv.on('object:selected', (function(_this) {
        return function(e) {
          switch (e.target.type) {
            case 'i-text':
              return void 0;
            case 'image':
              return void 0;
            case 'circle':
              return void 0;
            case 'line':
              return void 0;
            case 'heading':
              return void 0;
            case 'subheading':
              return void 0;
          }
        };
      })(this));
      return void 0;
    };

    CanvasPage.prototype.setPageBackground = function() {
      var pageRect, page_center_x;
      page_center_x = (this.canv_w - this.pg_dimensions.x) / 2;
      pageRect = new fabric.Rect({
        width: this.pg_dimensions.x,
        height: this.pg_dimensions.y,
        left: page_center_x,
        top: this.pg_vertical_padding,
        fill: '#ffffff',
        borderColor: 'blue',
        selectable: false
      });
      pageRect.setShadow("0 4px 10px rgba(0, 0, 0, 0.33)");
      pageRect.hasControls = false;
      this.canv.add(pageRect);
      return void 0;
    };

    CanvasPage.prototype.setMarginLines = function() {
      var coords, line_opts, margin_amount;
      console.log('setting margin lines');
      margin_amount = 50;
      line_opts = {
        stroke: 'rgba(36, 166, 227, 0.33)',
        strokeWidth: 1,
        lockScalingY: true,
        hasControls: false,
        originX: 'center',
        originY: 'center',
        padding: 2,
        selectable: false
      };
      coords = [0, this.pg_vertical_padding + margin_amount, this.canv_w, this.pg_vertical_padding + margin_amount];
      this.margin_top = new fabric.Line(coords, line_opts);
      coords = [this.pg_horizontal_padding + margin_amount, 0, this.pg_horizontal_padding + margin_amount, this.canv_h];
      this.margin_left = new fabric.Line(coords, line_opts);
      coords = [0, this.canv_h - this.pg_vertical_padding - margin_amount, this.canv_w, this.canv_h - this.pg_vertical_padding - margin_amount];
      this.margin_bottom = new fabric.Line(coords, line_opts);
      coords = [this.canv_w - this.pg_horizontal_padding - margin_amount, 0, this.canv_w - this.pg_horizontal_padding - margin_amount, this.canv_h];
      this.margin_right = new fabric.Line(coords, line_opts);
      this.canv.add(this.margin_top);
      this.canv.add(this.margin_left);
      this.canv.add(this.margin_bottom);
      this.canv.add(this.margin_right);
      return void 0;
    };

    CanvasPage.prototype.removeMarginLines = function() {
      this.canv.remove(this.margin_top);
      this.canv.remove(this.margin_left);
      this.canv.remove(this.margin_bottom);
      this.canv.remove(this.margin_right);
      return void 0;
    };

    CanvasPage.prototype.getSelectedElement = function() {
      return this.canv.getActiveObject();
    };

    return CanvasPage;

  })();

  $(document).ready(function() {
    var main;
    $('.main-app-container .app-toolbar button').tooltip();
    main = function() {
      var pdf_doc;
      window.pdf = pdf_doc = new PdfDocument();
      return void 0;
    };
    main();
  });

}).call(this);
